From e6fbb997b61282e59e9219b7fc7241770413dd77 Mon Sep 17 00:00:00 2001
From: Gabriele Ara <gabriele.ara@santannapisa.it>
Date: Fri, 2 Dec 2022 11:25:42 +0000
Subject: Fix DL: Keep looking for new pushable tasks

This fix removes the preventive exit in case the bandwidth is enough and
the first task in the list of pushable ones is not a new task.

New preventive optimization can be re-introduced later if necessary by
keeping a count of how many new pushable tasks there are on each rq.
---
 kernel/sched/deadline.c | 35 ++++++++++++++++++++++-------------
 1 file changed, 22 insertions(+), 13 deletions(-)

diff --git a/kernel/sched/deadline.c b/kernel/sched/deadline.c
index aced8e50cf3e..ace1466c4e75 100644
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@ -1496,7 +1496,7 @@ static void dequeue_dl_entity(struct sched_dl_entity *dl_se)
 static void enqueue_task_dl(struct rq *rq, struct task_struct *p, int flags)
 {
 	struct task_struct *pi_task = rt_mutex_get_top_task(p);
-	struct sched_dl_entity *pi_se = &p->dl;
+	struct sched_dl_entity *pi_se = &p->dl; // pi_se ?
 	bool contending;
 
 	if (is_dl_boosted(&p->dl)) {
@@ -2216,20 +2216,19 @@ static int push_dl_task(struct rq *rq)
 	     node = pushable_dl_next(rq, node, &trycount)) {
 		next_task = pushable_dl_task(rq, node);
 
-		/* Do we still WANT to push tasks? */
+		if (is_migration_disabled(next_task)) {
+			continue;
+		}
+
+		/* Do we want to push this task? */
 		if (rq->dl.this_bw <= rq->dl.max_bw && next_task->dl.dl_new == 0) {
-			return 0;
+			continue;
 		}
 
 		get_task_struct(next_task);
 
 		/* Will lock the rq it'll find */
 		later_rq = find_lock_later_rq_ff(next_task, rq);
-		/* Do we still WANT to push tasks? */
-		if (rq->dl.this_bw <= rq->dl.max_bw) {
-			put_task_struct(next_task);
-			return 0;
-		}
 
 		/*
 		 * Since we had to release the lock to find later_rq, check
@@ -2238,17 +2237,27 @@ static int push_dl_task(struct rq *rq)
 		 * NULL if we have to start again from the beginning.
 		 */
 		node = pushable_dl_find(rq, next_task);
-		if (node == NULL || later_rq == NULL) {
+		if (node == NULL || later_rq == NULL ||
+			(rq->dl.this_bw <= rq->dl.max_bw && next_task->dl.dl_new == 0)) {
 			/*
-			 * Task has already moved away or we cannot push it,
-			 * either way we want to try find a new task to push.
- 			 */
+			 * Task either:
+			 * - has already moved,
+			 * - we cannot push it,
+			 * - is not new anymore and
+			 * - we do not need to push it anymore because we are
+			 *   not over the bandwidth.
+			 *
+			 * In any of these cases we keep going trying to find
+			 * another task to push. If node == NULL we start again
+			 * from the beginning.
+			 */
+			next_task->dl.dl_new = 0;
 			put_task_struct(next_task);
 			continue;
 		}
 
 		/*
-		 * Task is still in the list of pushable ones and it can be
+		 * Task must still be moved and it can be
 		 * moved to later_rq, so we do it now.
 		 */
 		deactivate_task(rq, next_task, 0);
-- 
2.25.1

