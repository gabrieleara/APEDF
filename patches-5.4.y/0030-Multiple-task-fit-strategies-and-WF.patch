From 3537506367f4da55b15f4e36f17563737da598c5 Mon Sep 17 00:00:00 2001
From: Gabriele Ara <gabriele.ara@santannapisa.it>
Date: Wed, 12 Apr 2023 09:05:41 +0000
Subject: [PATCH 30/30] Multiple task fit strategies and WF

---
 Makefile                |  2 +-
 kernel/sched/deadline.c | 43 ++++++++++++++++++++++++++++++++++++-----
 2 files changed, 39 insertions(+), 6 deletions(-)

diff --git a/Makefile b/Makefile
index 1d5ddac38173..580a8b16b641 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@
 VERSION = 5
 PATCHLEVEL = 4
 SUBLEVEL = 236
-EXTRAVERSION =-apedf2
+EXTRAVERSION =-apedf2wf
 NAME = Kleptomaniac Octopus
 
 # *DOCUMENTATION*
diff --git a/kernel/sched/deadline.c b/kernel/sched/deadline.c
index 627e3bd4f715..1139202c3719 100644
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@ -1662,6 +1662,13 @@ static void yield_task_dl(struct rq *rq)
 
 static int find_later_rq(struct task_struct *task);
 static int find_later_rq_ff(struct task_struct *task);
+static int find_later_rq_wf(struct task_struct *task);
+static inline int find_later_rq_apedf_fit(struct task_struct *task);
+
+int find_later_rq_apedf_fit(struct task_struct *task)
+{
+	return find_later_rq_wf(task);
+}
 
 /* Only try algorithms three times */
 #define DL_MAX_TRIES 3
@@ -1687,8 +1694,8 @@ select_task_rq_dl(struct task_struct *p, int cpu, int sd_flag, int flags)
 		goto out1;
 	}
 	p->dl.dl_new = 0;
-	/* Try FF --- We are being optimistic, here! */
-	target = find_later_rq_ff(p);
+	/* Try APEDF FIT --- We are being optimistic, here! */
+	target = find_later_rq_apedf_fit(p);
 	if (target >= 0) {
 		cpu = target;
 #if 0
@@ -2050,6 +2057,32 @@ static int find_later_rq_ff(struct task_struct *task)
 	return -1;
 }
 
+static int find_later_rq_wf(struct task_struct *task)
+{
+	struct root_domain *rd = task_rq(task)->rd;
+	u64 min_bw = U64_MAX;
+	int min_cpu = -1;
+	int i;
+
+	RCU_LOCKDEP_WARN(!rcu_read_lock_sched_held(),
+			 "sched RCU must be held");
+	for_each_cpu_and(i, rd->span, cpu_active_mask) {
+		struct rq *rq = cpu_rq(i);
+		u64 added_bw = i == task_cpu(task) ? 0 : task->dl.dl_bw;
+		u64 next_bw = rq->dl.this_bw + added_bw;
+
+		if (cpumask_test_cpu(i, task->cpus_ptr) && (next_bw < rq->dl.max_bw)) {
+			// Task fits, update if it is the worst fit so far
+			if (next_bw < min_bw) {
+				min_cpu = i;
+				min_bw = next_bw;
+			}
+		}
+	}
+
+	return min_cpu;
+}
+
 /* Locks the rq it finds */
 static struct rq *find_lock_later_rq(struct task_struct *task, struct rq *rq)
 {
@@ -2108,14 +2141,14 @@ static struct rq *find_lock_later_rq(struct task_struct *task, struct rq *rq)
 	return later_rq;
 }
 
-static struct rq *find_lock_later_rq_ff(struct task_struct *task, struct rq *rq)
+static struct rq *find_lock_later_rq_apedf_fit(struct task_struct *task, struct rq *rq)
 {
 	struct rq *later_rq = NULL;
 	int tries;
 	int cpu;
 
 	for (tries = 0; tries < DL_MAX_TRIES; tries++) {
-		cpu = find_later_rq_ff(task);
+		cpu = find_later_rq_apedf_fit(task);
 
 		if ((cpu == -1) || (cpu == rq->cpu))
 			break;
@@ -2245,7 +2278,7 @@ static int push_dl_task(struct rq *rq)
 		get_task_struct(next_task);
 
 		/* Will lock the rq it'll find */
-		later_rq = find_lock_later_rq_ff(next_task, rq);
+		later_rq = find_lock_later_rq_apedf_fit(next_task, rq);
 
 		/*
 		 * Since we had to release the lock to find later_rq, check
-- 
2.41.0

